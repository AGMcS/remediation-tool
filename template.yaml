AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >
  AWS remediation tool infrastructure including:
  - 6 DynamoDB tables for storing compliance and remediation data
  - 4 core remediation Lambdas
  - Detection and scheduling components
  - API Gateway for frontend integration
  - EventBridge rules for automated detection
  - SNS notifications for alerts

Globals:
  Function:
    Runtime: python3.12
    Timeout: 60
    MemorySize: 128

Resources:
  # -------------------------------------------------------------------------------------
  # DynamoDB Tables
  # -------------------------------------------------------------------------------------
  ComplianceDefinitionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ComplianceDefinitions
      AttributeDefinitions:
        - AttributeName: ServiceType
          AttributeType: S
        - AttributeName: ComplianceID
          AttributeType: S
      KeySchema:
        - AttributeName: ServiceType
          KeyType: HASH
        - AttributeName: ComplianceID
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  MisconfiguredResourcesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MisconfiguredResources
      AttributeDefinitions:
        - AttributeName: ResourceID
          AttributeType: S
        - AttributeName: DetectedTimeGenerated
          AttributeType: S
        - AttributeName: ServiceType
          AttributeType: S
        - AttributeName: SeverityID
          AttributeType: S
      KeySchema:
        - AttributeName: ResourceID
          KeyType: HASH
        - AttributeName: DetectedTimeGenerated
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: ServiceTypeIndex
          KeySchema:
            - AttributeName: ServiceType
              KeyType: HASH
            - AttributeName: DetectedTimeGenerated
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: SeverityTimeIndex
          KeySchema:
            - AttributeName: SeverityID
              KeyType: HASH
            - AttributeName: DetectedTimeGenerated
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  SeverityLevelsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: SeverityLevels
      AttributeDefinitions:
        - AttributeName: SeverityID
          AttributeType: S
      KeySchema:
        - AttributeName: SeverityID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  RemediationActionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: RemediationActions
      AttributeDefinitions:
        - AttributeName: RemediationID
          AttributeType: S
        - AttributeName: StartTime
          AttributeType: S
        - AttributeName: ResourceID
          AttributeType: S
        - AttributeName: RemediationStatus
          AttributeType: S
      KeySchema:
        - AttributeName: RemediationID
          KeyType: HASH
        - AttributeName: StartTime
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: ResourceRemediationIndex
          KeySchema:
            - AttributeName: ResourceID
              KeyType: HASH
            - AttributeName: StartTime
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: StatusTimeIndex
          KeySchema:
            - AttributeName: RemediationStatus
              KeyType: HASH
            - AttributeName: StartTime
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  CompletedRemediationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: CompletedRemediations
      AttributeDefinitions:
        - AttributeName: CompletedRemediationID
          AttributeType: S
        - AttributeName: RemediationID
          AttributeType: S
        - AttributeName: CompletionTimestamp
          AttributeType: S
      KeySchema:
        - AttributeName: CompletedRemediationID
          KeyType: HASH
        - AttributeName: CompletionTimestamp
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: RemediationCompletionIndex
          KeySchema:
            - AttributeName: RemediationID
              KeyType: HASH
            - AttributeName: CompletionTimestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  NotificationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Notifications
      AttributeDefinitions:
        - AttributeName: NotificationID
          AttributeType: S
        - AttributeName: NotificationSentTime
          AttributeType: S
        - AttributeName: ResourceID
          AttributeType: S
      KeySchema:
        - AttributeName: NotificationID
          KeyType: HASH
        - AttributeName: NotificationSentTime
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: ResourceNotificationIndex
          KeySchema:
            - AttributeName: ResourceID
              KeyType: HASH
            - AttributeName: NotificationSentTime
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  # -------------------------------------------------------------------------------------
  # API Gateway Definition
  # -------------------------------------------------------------------------------------
  ApiGatewayApi:
      Type: AWS::Serverless::Api
      Properties:
        Name: RemediationToolAPI
        StageName: Prod
        Cors: 
          AllowMethods: "'GET,POST,OPTIONS'"
          AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Requested-With'"
          AllowOrigin: "'http://localhost:3000'"
          MaxAge: "'600'"
        EndpointConfiguration: REGIONAL
        Auth:
          DefaultAuthorizer: NONE
          ApiKeyRequired: false 
        DefinitionBody:
          openapi: "3.0.1"
          info:
            title: "Remediation Tool API"
            version: "1.0.0"
          paths:
            /dashboard:
              get:
                summary: "Get dashboard data"
                x-amazon-apigateway-integration:
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DashboardDataFunction.Arn}/invocations"
                  passthroughBehavior: when_no_match
                  httpMethod: POST
                  type: aws_proxy
                responses:
                  "200":
                    description: "Success"
                  "500":
                    description: "Error"
            
            /remediations/scheduled:
              get:
                summary: "Get scheduled remediations"
                x-amazon-apigateway-integration:
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ScheduledRemediationsFunction.Arn}/invocations"
                  passthroughBehavior: when_no_match
                  httpMethod: POST
                  type: aws_proxy
                responses:
                  "200":
                    description: "Success"
                  "500":
                    description: "Error"
            
            /remediations/historical:
              get:
                summary: "Get historical remediations"
                x-amazon-apigateway-integration:
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HistoricalRemediationsFunction.Arn}/invocations"
                  passthroughBehavior: when_no_match
                  httpMethod: POST
                  type: aws_proxy
                responses:
                  "200":
                    description: "Success"
                  "500":
                    description: "Error"

  # -------------------------------------------------------------------------------------
  # Detection and Scheduling Components
  # -------------------------------------------------------------------------------------
  DetectionLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: complianceDetection
      CodeUri: src/functions/detection/
      Handler: handlers/detectionHandler.lambdaHandler
      Role: !GetAtt RemediationLambdaExecutionRole.Arn
      Description: "Handles initial detection of compliance violations"
      Environment:
        Variables:
          MISCONFIG_TABLE: !Ref MisconfiguredResourcesTable
          REMEDIATION_TABLE: !Ref RemediationActionsTable
          SEVERITY_TABLE: !Ref SeverityLevelsTable
          NOTIFICATION_TOPIC: !Ref RemediationNotificationTopic

  RemediationSchedulerRule:
    Type: AWS::Events::Rule
    Properties:
      Name: RemediationSchedulerRule
      Description: "Triggers remediation scheduler every 5 minutes"
      ScheduleExpression: "rate(5 minutes)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt RemediationSchedulerLambda.Arn
          Id: "RemediationSchedulerTarget"

  RemediationSchedulerLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: remediationScheduler
      CodeUri: src/functions/scheduler/
      Handler: remediationScheduler.lambdaHandler
      Role: !GetAtt RemediationLambdaExecutionRole.Arn
      Description: "Checks for and triggers due remediations"
      Environment:
        Variables:
          MISCONFIG_TABLE: !Ref MisconfiguredResourcesTable
          REMEDIATION_TABLE: !Ref RemediationActionsTable
          COMPLETED_TABLE: !Ref CompletedRemediationsTable
          NOTIFICATION_TOPIC: !Ref RemediationNotificationTopic

  # -------------------------------------------------------------------------------------
  # Compliance Rule Population Components
  # -------------------------------------------------------------------------------------
  ComplianceRulePopulationLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: complianceRulePopulator
      CodeUri: src/functions/scripts/
      Handler: populateComplianceRules.lambdaHandler
      Role: !GetAtt CompliancePopulatorRole.Arn
      Description: "Populates initial compliance rules in DynamoDB"
      Environment:
        Variables:
          COMPLIANCE_TABLE_NAME: !Ref ComplianceDefinitionsTable
      Timeout: 300  # 5 minutes to allow for all rules to be populated

  CompliancePopulatorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CompliancePopulatorRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ComplianceTableAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:Scan
                Resource: !GetAtt ComplianceDefinitionsTable.Arn

  # -------------------------------------------------------------------------------------
  # EventBridge Rule Creation Components
  # -------------------------------------------------------------------------------------
  CreateEventBridgeRulesRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CreateEventBridgeRulesRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:GetItem
                Resource: !GetAtt ComplianceDefinitionsTable.Arn
        - PolicyName: EventBridgeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - events:PutRule
                  - events:PutTargets
                  - events:DeleteRule
                  - events:RemoveTargets
                Resource: "*"
        - PolicyName: LambdaInvokePermission
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:AddPermission
                  - lambda:RemovePermission
                Resource:
                  - !GetAtt RemediationLambdaDefaultSg.Arn
                  - !GetAtt RemediationLambdaEbsEncryption.Arn
                  - !GetAtt RemediationLambdaS3PublicAccess.Arn
                  - !GetAtt RemediationLambdaRdsPublicAccess.Arn

  CreateEventBridgeRulesLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: createEventbridgeRules
      CodeUri: src/functions/eventBridgeSetup/
      Handler: createEventBridgeRules.lambdaHandler
      Role: !GetAtt CreateEventBridgeRulesRole.Arn
      Description: "Creates EventBridge rules based on compliance definitions"
      Environment:
        Variables:
          COMPLIANCE_TABLE_NAME: !Ref ComplianceDefinitionsTable
          LAMBDA_MAPPING: !Sub |
            {
              "CIS-4.2": "${RemediationLambdaDefaultSg.Arn}",
              "CIS-2.2.1": "${RemediationLambdaEbsEncryption.Arn}",
              "CIS-2.1.5": "${RemediationLambdaS3PublicAccess.Arn}",
              "CIS-2.3.2": "${RemediationLambdaRdsPublicAccess.Arn}"
            }

  # -------------------------------------------------------------------------------------
  # Orchestration of Rule Creation
  # -------------------------------------------------------------------------------------
  ComplianceRuleSetupCustomResource:
    Type: Custom::ComplianceSetup
    Properties:
      ServiceToken: !GetAtt ComplianceRulePopulationLambda.Arn
    DependsOn:
      - ComplianceDefinitionsTable

  CreateEventBridgeRulesCustomResource:
    Type: Custom::CreateEBRules
    Properties:
      ServiceToken: !GetAtt CreateEventBridgeRulesLambda.Arn
    DependsOn:
      - ComplianceRuleSetupCustomResource  # Ensures compliance rules are populated first
      - ComplianceDefinitionsTable
      - RemediationLambdaDefaultSg
      - RemediationLambdaEbsEncryption
      - RemediationLambdaS3PublicAccess
      - RemediationLambdaRdsPublicAccess

  # -------------------------------------------------------------------------------------
  # Core Remediation Lambdas
  # -------------------------------------------------------------------------------------

  # Default Security Group Remediation (CIS-4.2)
  RemediationLambdaDefaultSg:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: remediationLambdaDefaultSg
      CodeUri: src/functions/remediations/defaultSecurityGroup/
      Handler: defaultSGRemediation.lambdaHandler
      Role: !GetAtt RemediationLambdaExecutionRole.Arn
      Description: "Remediates default Security Group open access (CIS-4.2)"
      Environment:
        Variables:
          MISCONFIG_TABLE: !Ref MisconfiguredResourcesTable
          REMEDIATION_TABLE: !Ref RemediationActionsTable
          COMPLETED_TABLE: !Ref CompletedRemediationsTable
          NOTIFICATION_TOPIC: !Ref RemediationNotificationTopic

  # EBS Encryption Remediation (CIS-2.2.1)
  RemediationLambdaEbsEncryption:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: remediationLambdaEbsEncryption
      CodeUri: src/functions/remediations/ebsEncryption/
      Handler: ebsEncryptionRemediation.lambdaHandler
      Role: !GetAtt RemediationLambdaExecutionRole.Arn
      Description: "Remediates EBS volume encryption noncompliance (CIS-2.2.1)"
      Environment:
        Variables:
          MISCONFIG_TABLE: !Ref MisconfiguredResourcesTable
          REMEDIATION_TABLE: !Ref RemediationActionsTable
          COMPLETED_TABLE: !Ref CompletedRemediationsTable
          NOTIFICATION_TOPIC: !Ref RemediationNotificationTopic

  # S3 Public Access Remediation (CIS-2.1.5)
  RemediationLambdaS3PublicAccess:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: remediationLambdaS3PublicAccess
      CodeUri: src/functions/remediations/s3Encryption/
      Handler: s3PublicAccessRemediation.lambdaHandler
      Role: !GetAtt RemediationLambdaExecutionRole.Arn
      Description: "Remediates S3 public access violations (CIS-2.1.5)"
      Environment:
        Variables:
          MISCONFIG_TABLE: !Ref MisconfiguredResourcesTable
          REMEDIATION_TABLE: !Ref RemediationActionsTable
          COMPLETED_TABLE: !Ref CompletedRemediationsTable
          NOTIFICATION_TOPIC: !Ref RemediationNotificationTopic

  # RDS Public Access Remediation (CIS-2.3.2)
  RemediationLambdaRdsPublicAccess:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: remediationLambdaRdsPublicAccess
      CodeUri: src/functions/remediations/rdsPublic/
      Handler: rdsPublicAccessRemediation.lambdaHandler
      Role: !GetAtt RemediationLambdaExecutionRole.Arn
      Description: "Remediates RDS public access noncompliance (CIS-2.3.2)"
      Environment:
        Variables:
          MISCONFIG_TABLE: !Ref MisconfiguredResourcesTable
          REMEDIATION_TABLE: !Ref RemediationActionsTable
          COMPLETED_TABLE: !Ref CompletedRemediationsTable
          NOTIFICATION_TOPIC: !Ref RemediationNotificationTopic

  # -------------------------------------------------------------------------------------
  # Frontend API Lambdas
  # -------------------------------------------------------------------------------------

  # Dashboard Data API Lambda
  DashboardDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getDashboardData
      CodeUri: src/functions/api/dashboard/
      Handler: getDashboardData.lambdaHandler
      Role: !GetAtt APILambdaExecutionRole.Arn
      Description: "Retrieves dashboard data for frontend display"
      Environment:
        Variables:
          MISCONFIG_TABLE: !Ref MisconfiguredResourcesTable
          REMEDIATION_TABLE: !Ref RemediationActionsTable
          COMPLETED_TABLE: !Ref CompletedRemediationsTable
          NOTIFICATION_TABLE: !Ref NotificationsTable
      Events:
        DashboardAPI:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /dashboard
            Method: GET

  # Scheduled Remediations API Lambda
  ScheduledRemediationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getScheduledRemediations
      CodeUri: src/functions/api/scheduled/
      Handler: getScheduledRemediations.lambdaHandler
      Role: !GetAtt APILambdaExecutionRole.Arn
      Description: "Retrieves scheduled remediations data for frontend display"
      Environment:
        Variables:
          MISCONFIG_TABLE: !Ref MisconfiguredResourcesTable
          REMEDIATION_TABLE: !Ref RemediationActionsTable
          SEVERITY_TABLE: !Ref SeverityLevelsTable
      Events:
        ScheduledAPI:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /remediations/scheduled
            Method: GET

  # Historical Remediations API Lambda
  HistoricalRemediationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getHistoricalRemediations
      CodeUri: src/functions/api/historical/
      Handler: getHistoricalRemediations.lambdaHandler
      Role: !GetAtt APILambdaExecutionRole.Arn
      Description: "Retrieves historical remediation data for frontend display"
      Environment:
        Variables:
          MISCONFIG_TABLE: !Ref MisconfiguredResourcesTable
          REMEDIATION_TABLE: !Ref RemediationActionsTable
          COMPLETED_TABLE: !Ref CompletedRemediationsTable
      Events:
        HistoricalAPI:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /remediations/historical
            Method: GET


  # -------------------------------------------------------------------------------------
  # SNS Topics for Notifications
  # -------------------------------------------------------------------------------------
  RemediationNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: RemediationNotifications
      DisplayName: "AWS Remediation Tool Notifications"
      KmsMasterKeyId: "alias/aws/sns"

  # -------------------------------------------------------------------------------------
  # IAM Roles and Policies
  # -------------------------------------------------------------------------------------
  RemediationLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: RemediationLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: RemediationPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                Resource:
                  - !GetAtt MisconfiguredResourcesTable.Arn
                  - !GetAtt RemediationActionsTable.Arn
                  - !GetAtt CompletedRemediationsTable.Arn
                  - !GetAtt SeverityLevelsTable.Arn
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref RemediationNotificationTopic
              - Effect: Allow
                Action:
                  - s3:GetBucketTagging
                  - s3:GetBucketPublicAccessBlock
                  - s3:PutBucketPublicAccessBlock
                  - ec2:DescribeVolumes
                  - ec2:CreateSnapshot
                  - ec2:CreateVolume
                  - ec2:DeleteVolume
                  - ec2:DescribeVpcs
                  - ec2:RevokeSecurityGroupIngress
                  - rds:DescribeDBInstances
                  - rds:ModifyDBInstance
                  - rds:ListTagsForResource
                Resource: "*"

  APILambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: APILambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: APIPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt MisconfiguredResourcesTable.Arn
                  - !GetAtt RemediationActionsTable.Arn
                  - !GetAtt CompletedRemediationsTable.Arn
                  - !GetAtt SeverityLevelsTable.Arn
                  - !GetAtt NotificationsTable.Arn

  # -------------------------------------------------------------------------------------
  # Lambda Permissions for EventBridge
  # -------------------------------------------------------------------------------------
  SchedulerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RemediationSchedulerLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt RemediationSchedulerRule.Arn

  # -------------------------------------------------------------------------------------
  # Lambda Permissions for Api
  # -------------------------------------------------------------------------------------
  DashboardFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DashboardDataFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApi}/*/GET/dashboard"

  ScheduledRemediationsFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ScheduledRemediationsFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApi}/*/GET/remediations/scheduled"

  HistoricalRemediationsFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref HistoricalRemediationsFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApi}/*/GET/remediations/historical"

# -------------------------------------------------------------------------------------
# Outputs
# -------------------------------------------------------------------------------------
Outputs:
  RemediationNotificationTopicArn:
    Description: "ARN of the SNS topic for remediation notifications"
    Value: !Ref RemediationNotificationTopic
    Export:
      Name: !Sub "${AWS::StackName}-NotificationTopicArn"

  ComplianceDefinitionsTableName:
    Description: "Name of the ComplianceDefinitions table"
    Value: !Ref ComplianceDefinitionsTable
    Export:
      Name: !Sub "${AWS::StackName}-ComplianceDefinitionsTable"

  MisconfiguredResourcesTableName:
    Description: "Name of the MisconfiguredResources table"
    Value: !Ref MisconfiguredResourcesTable
    Export:
      Name: !Sub "${AWS::StackName}-MisconfiguredResourcesTable"

  RemediationActionsTableName:
    Description: "Name of the RemediationActions table"
    Value: !Ref RemediationActionsTable
    Export:
      Name: !Sub "${AWS::StackName}-RemediationActionsTable"

  StackRegion:
    Description: "Region where the stack is deployed"
    Value: !Ref AWS::Region
    Export:
      Name: !Sub "${AWS::StackName}-Region"

  StackName:
    Description: "Name of the stack"
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub "${AWS::StackName}-Name"

  ApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
    Export:
      Name: !Sub "${AWS::StackName}-ApiEndpoint"

  DashboardApiUrl:
    Description: "Dashboard API endpoint"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/dashboard"
    Export:
      Name: !Sub "${AWS::StackName}-DashboardApiUrl"

  ScheduledRemediationsApiUrl:
    Description: "Scheduled Remediations API endpoint"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/remediations/scheduled"
    Export:
      Name: !Sub "${AWS::StackName}-ScheduledRemediationsApiUrl"

  HistoricalRemediationsApiUrl:
    Description: "Historical Remediations API endpoint"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/remediations/historical"
    Export:
      Name: !Sub "${AWS::StackName}-HistoricalRemediationsApiUrl"
